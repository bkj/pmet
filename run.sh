#!/bin/bash

# --
# Installation (using Anaconda python)

conda create -n pmet_env python=2.7 pip -y
source activate pmet_env

# If you have a GPU w/ CUDA 8:
conda install -y pytorch torchvision -c pytorch

# If you don't have a GPU:
# conda install -y pytorch-cpu torchvision -c pytorch
# Note: Some of these models are going to run slowly w/o a GPU

pip install -r requirements.txt

python setup.py clean --all install

# --
# Usage

# Note: Look at the format generated by `utils/fake_data.py` to see the input format
# that pmet expects.  It's a melted dataframe, with labels in one column and values
# in another.  This is a general data format that should cover anything you see
# in the wild.

mkdir -p ./data

# Generate some fake data for training a model
python ./utils/fake_data.py --n 5000 > ./data/train
python ./utils/fake_data.py --n 1000 > ./data/test

# Train a model
python -m pmet --attention --bidirectional --epochs 3

# Predict on some new data
python ./utils/fake_data.py --n 1000 > ./data/final-test.all
cat ./data/final-test.all | cut -d$'\t' -f1 > ./data/final-test.labels
cat ./data/final-test.all | cut -d$'\t' -f2 > ./data/final-test.values

python -m pmet --model-path ./model --data-path ./data/final-test.values > ./data/final-test.preds
python utils/eval.py --labels ./data/final-test.labels --predictions ./data/final-test.preds